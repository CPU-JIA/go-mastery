# ☸️ Kubernetes微服务部署 - 云原生最佳实践

apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-microservice
  namespace: microservices
  labels:
    app: go-microservice
    version: v1.0.0
    component: backend
    tier: application
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "Initial deployment of go-microservice v1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: go-microservice
  template:
    metadata:
      labels:
        app: go-microservice
        version: v1.0.0
        component: backend
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/api/metrics"
        fluentd.org/include: "true"
    spec:
      # 安全上下文 - 非特权运行
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault

      # 服务账户
      serviceAccountName: microservice-sa

      # 优雅停机时间
      terminationGracePeriodSeconds: 30

      # 容器配置
      containers:
      - name: go-microservice
        image: microservice:v1.0.0
        imagePullPolicy: IfNotPresent

        # 端口配置
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9091
          protocol: TCP

        # 环境变量
        env:
        - name: PORT
          value: "8080"
        - name: ENVIRONMENT
          value: "kubernetes"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: microservice-config
              key: log_level
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: microservice-secrets
              key: postgres_url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: microservice-secrets
              key: redis_url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: microservice-secrets
              key: jwt_secret
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName

        # 资源限制
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "256Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"

        # 健康检查
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        # 启动探针 (避免慢启动应用被杀死)
        startupProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30

        # 生命周期钩子
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - "sleep 15" # 优雅停机延迟

        # 安全上下文
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL

        # 卷挂载
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-run
          mountPath: /var/run
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: secret-volume
          mountPath: /etc/secrets
          readOnly: true

      # 数据卷
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      - name: config-volume
        configMap:
          name: microservice-config
          defaultMode: 0444
      - name: secret-volume
        secret:
          secretName: microservice-secrets
          defaultMode: 0400

      # Pod反亲和性 - 避免单点故障
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - go-microservice
              topologyKey: kubernetes.io/hostname

      # 容忍度配置
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
# ==========================================
# ConfigMap: 应用配置
# ==========================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: microservice-config
  namespace: microservices
  labels:
    app: go-microservice
    component: config
data:
  # 应用配置
  log_level: "info"
  read_timeout: "30s"
  write_timeout: "30s"
  health_check_interval: "30s"
  health_check_timeout: "5s"
  health_check_retries: "3"

  # 功能开关
  feature_flags: |
    circuit_breaker_enabled: true
    rate_limiting_enabled: true
    metrics_enabled: true
    tracing_enabled: true

  # 监控配置
  monitoring_config: |
    prometheus:
      enabled: true
      path: /api/metrics
      port: 8080
    jaeger:
      enabled: true
      endpoint: http://jaeger-collector:14268/api/traces

  # 日志配置
  logging_config: |
    level: info
    format: json
    outputs:
      - stdout
    structured: true

---
# ==========================================
# Secret: 敏感配置
# ==========================================
apiVersion: v1
kind: Secret
metadata:
  name: microservice-secrets
  namespace: microservices
  labels:
    app: go-microservice
    component: secrets
type: Opaque
data:
  # Base64编码的敏感信息
  postgres_url: cG9zdGdyZXM6Ly91c2VyOnBhc3N3b3JkQHBvc3RncmVzOjU0MzIvZGF0YWJhc2U=
  redis_url: cmVkaXM6Ly9yZWRpczo2Mzc5LzA=
  jwt_secret: bXlfc3VwZXJfc2VjcmV0X2p3dF9rZXlfMTIzNDU2Nzg5MA==
  api_key: YXBpX2tleV9zZWNyZXRfMTIzNDU2
  encryption_key: ZW5jcnlwdGlvbl9rZXlfYWJjZGVmZ2hpams=

---
# ==========================================
# Service: 服务发现和负载均衡
# ==========================================
apiVersion: v1
kind: Service
metadata:
  name: go-microservice-svc
  namespace: microservices
  labels:
    app: go-microservice
    component: service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    prometheus.io/scrape: "true"
    prometheus.io/port: "9091"
    prometheus.io/path: "/api/metrics"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: go-microservice
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9091
    targetPort: metrics
    protocol: TCP

---
# ==========================================
# ServiceAccount: 服务账户和RBAC
# ==========================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: microservice-sa
  namespace: microservices
  labels:
    app: go-microservice
    component: rbac
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: microservice-role
  namespace: microservices
  labels:
    app: go-microservice
    component: rbac
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: microservice-rolebinding
  namespace: microservices
  labels:
    app: go-microservice
    component: rbac
subjects:
- kind: ServiceAccount
  name: microservice-sa
  namespace: microservices
roleRef:
  kind: Role
  name: microservice-role
  apiGroup: rbac.authorization.k8s.io

---
# ==========================================
# HPA: 自动水平扩缩容
# ==========================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: go-microservice-hpa
  namespace: microservices
  labels:
    app: go-microservice
    component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: go-microservice
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max

---
# ==========================================
# PodDisruptionBudget: Pod中断预算
# ==========================================
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: go-microservice-pdb
  namespace: microservices
  labels:
    app: go-microservice
    component: disruption-budget
spec:
  selector:
    matchLabels:
      app: go-microservice
  minAvailable: 50%

---
# ==========================================
# NetworkPolicy: 网络安全策略
# ==========================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: go-microservice-netpol
  namespace: microservices
  labels:
    app: go-microservice
    component: network-policy
spec:
  podSelector:
    matchLabels:
      app: go-microservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # 允许来自同一命名空间的流量
  - from:
    - namespaceSelector:
        matchLabels:
          name: microservices
    ports:
    - protocol: TCP
      port: 8080
  # 允许来自monitoring命名空间的Prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  # 允许来自ingress-controller的流量
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-system
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # 允许DNS解析
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  # 允许访问数据库
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
  # 允许访问外部API (HTTPS)
  - to: []
    ports:
    - protocol: TCP
      port: 443