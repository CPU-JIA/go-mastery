# ==========================================
# Docker Compose: 微服务栈编排
# ==========================================
# 演示完整的微服务生态系统，包括:
# - 微服务应用
# - 数据库 (PostgreSQL, Redis)
# - 监控 (Prometheus, Grafana)
# - 追踪 (Jaeger)
# - 负载均衡 (Nginx)
# - 日志 (ELK Stack)

version: '3.8'

# ==========================================
# 网络定义
# ==========================================
networks:
  microservices:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  monitoring:
    driver: bridge

# ==========================================
# 数据卷定义
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# ==========================================
# 服务定义
# ==========================================
services:
  # ------------------------------------------
  # 微服务应用 (多实例负载均衡)
  # ------------------------------------------
  microservice-1:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: "v1.0.0"
        BUILD_TIME: "2025-01-01T00:00:00Z"
        BUILD_COMMIT: "abc1234"
    container_name: microservice-1
    hostname: microservice-1
    networks:
      - microservices
    ports:
      - "8081:8080"
    environment:
      - PORT=8080
      - ENVIRONMENT=docker-compose
      - LOG_LEVEL=info
      - POSTGRES_URL=postgres://postgres:password@postgres:5432/microservices?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  microservice-2:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: "v1.0.0"
        BUILD_TIME: "2025-01-01T00:00:00Z"
        BUILD_COMMIT: "abc1234"
    container_name: microservice-2
    hostname: microservice-2
    networks:
      - microservices
    ports:
      - "8082:8080"
    environment:
      - PORT=8080
      - ENVIRONMENT=docker-compose
      - LOG_LEVEL=info
      - POSTGRES_URL=postgres://postgres:password@postgres:5432/microservices?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ------------------------------------------
  # 负载均衡器 (Nginx)
  # ------------------------------------------
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-lb
    networks:
      - microservices
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - microservice-1
      - microservice-2
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ------------------------------------------
  # 数据库服务
  # ------------------------------------------
  postgres:
    image: postgres:16-alpine
    container_name: postgres-db
    networks:
      - microservices
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: microservices
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d microservices"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    networks:
      - microservices
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ------------------------------------------
  # 监控和可观测性
  # ------------------------------------------
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    networks:
      - microservices
      - monitoring
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    networks:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ------------------------------------------
  # 分布式追踪 (Jaeger)
  # ------------------------------------------
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: jaeger
    networks:
      - microservices
      - monitoring
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Web UI
      - "14268:14268"  # Accept jaeger.thrift directly from clients
      - "14250:14250"  # Accept gRPC
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    restart: unless-stopped

  # ------------------------------------------
  # 日志聚合 (简化版 ELK)
  # ------------------------------------------
  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: elasticsearch
    networks:
      - monitoring
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  logstash:
    image: logstash:8.9.0
    container_name: logstash
    networks:
      - monitoring
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  kibana:
    image: kibana:8.9.0
    container_name: kibana
    networks:
      - monitoring
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

# ==========================================
# 使用说明
# ==========================================
# 启动完整栈:
# docker-compose up -d
#
# 启动基础服务:
# docker-compose up -d microservice-1 microservice-2 postgres redis
#
# 启动监控栈:
# docker-compose up -d prometheus grafana jaeger
#
# 启动日志栈:
# docker-compose up -d elasticsearch logstash kibana
#
# 查看服务状态:
# docker-compose ps
#
# 查看服务日志:
# docker-compose logs -f microservice-1
#
# 扩展服务实例:
# docker-compose up -d --scale microservice-1=3
#
# 停止所有服务:
# docker-compose down
#
# 停止并删除数据:
# docker-compose down -v
#
# ==========================================
# 访问端点:
# ==========================================
# 负载均衡器: http://localhost
# 微服务-1: http://localhost:8081
# 微服务-2: http://localhost:8082
# Prometheus: http://localhost:9090
# Grafana: http://localhost:3000 (admin/admin123)
# Jaeger: http://localhost:16686
# Kibana: http://localhost:5601
# PostgreSQL: localhost:5432
# Redis: localhost:6379