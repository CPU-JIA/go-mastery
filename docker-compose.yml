# Go Mastery - Docker Compose Configuration
# Supports multiple environments: development, production, demo, and testing

version: '3.8'

services:
  # Development environment with hot reload
  go-mastery-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: go-mastery-dev
    volumes:
      - .:/app
      - go-cache:/go/pkg/mod
      - build-cache:/root/.cache/go-build
    ports:
      - "8080:8080"   # Application port
      - "9090:9090"   # Metrics port
      - "6060:6060"   # pprof port
      - "8081:8081"   # Debug port
    environment:
      - GO_ENV=development
      - LOG_LEVEL=debug
      - HOT_RELOAD=true
    networks:
      - go-mastery-network
    depends_on:
      - postgres-dev
      - redis-dev
    restart: unless-stopped

  # Production environment
  go-mastery-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: go-mastery-prod
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=production
      - LOG_LEVEL=info
    networks:
      - go-mastery-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # Demo/Tutorial environment
  go-mastery-demo:
    build:
      context: .
      dockerfile: Dockerfile
      target: demo
    container_name: go-mastery-demo
    volumes:
      - .:/app
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=demo
      - LOG_LEVEL=info
    networks:
      - go-mastery-network
    stdin_open: true
    tty: true

  # Testing environment
  go-mastery-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: go-mastery-test
    volumes:
      - .:/app
      - test-cache:/go/pkg/mod
    environment:
      - GO_ENV=testing
      - LOG_LEVEL=debug
    networks:
      - go-mastery-network
    depends_on:
      - postgres-test
      - redis-test

  # Performance testing environment
  go-mastery-perf:
    build:
      context: .
      dockerfile: Dockerfile
      target: performance
    container_name: go-mastery-perf
    volumes:
      - .:/app
      - perf-data:/app/benchmarks
    environment:
      - GO_ENV=performance
    networks:
      - go-mastery-network
    profiles:
      - performance

  # PostgreSQL for development
  postgres-dev:
    image: postgres:16-alpine
    container_name: go-mastery-postgres-dev
    environment:
      POSTGRES_DB: go_mastery_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - go-mastery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d go_mastery_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for production
  postgres:
    image: postgres:16-alpine
    container_name: go-mastery-postgres
    environment:
      POSTGRES_DB: go_mastery
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - go-mastery-network
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d go_mastery"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL for testing
  postgres-test:
    image: postgres:16-alpine
    container_name: go-mastery-postgres-test
    environment:
      POSTGRES_DB: go_mastery_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - go-mastery-network
    tmpfs:
      - /var/lib/postgresql/data:rw,noexec,nosuid,size=100m

  # Redis for development
  redis-dev:
    image: redis:7-alpine
    container_name: go-mastery-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data
      - ./configs/redis-dev.conf:/usr/local/etc/redis/redis.conf
    networks:
      - go-mastery-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Redis for production
  redis:
    image: redis:7-alpine
    container_name: go-mastery-redis
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
      - ./configs/redis-prod.conf:/usr/local/etc/redis/redis.conf
    networks:
      - go-mastery-network
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M

  # Redis for testing
  redis-test:
    image: redis:7-alpine
    container_name: go-mastery-redis-test
    ports:
      - "6381:6379"
    networks:
      - go-mastery-network
    tmpfs:
      - /data:rw,noexec,nosuid,size=50m

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: go-mastery-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - go-mastery-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: go-mastery-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    networks:
      - go-mastery-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: go-mastery-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - go-mastery-network
    profiles:
      - tracing

  # MinIO for object storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: go-mastery-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    networks:
      - go-mastery-network
    command: server /data --console-address ":9001"
    profiles:
      - storage

  # Documentation server
  docs:
    build:
      context: .
      dockerfile: Dockerfile.docs
    container_name: go-mastery-docs
    ports:
      - "8082:8080"
    volumes:
      - ./docs:/app/docs
    networks:
      - go-mastery-network
    profiles:
      - docs

# Named volumes for persistent data
volumes:
  postgres-dev-data:
    driver: local
  postgres-data:
    driver: local
  postgres-test-data:
    driver: local
  redis-dev-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  minio-data:
    driver: local
  go-cache:
    driver: local
  build-cache:
    driver: local
  test-cache:
    driver: local
  perf-data:
    driver: local

# Networks
networks:
  go-mastery-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Secrets for production
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt