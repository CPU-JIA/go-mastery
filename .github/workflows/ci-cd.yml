# Go Mastery - Advanced Go Learning Path
# GitHub Actions CI/CD Pipeline

name: Go Mastery CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.24'
  GOLANGCI_LINT_VERSION: 'v1.55'
  COVERAGE_THRESHOLD: 75

jobs:
  # Code Quality and Testing
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Install development tools
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files need formatting:"
          gofmt -s -l .
          exit 1
        fi

    - name: Go vet
      run: go vet ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --config .golangci.yml

    - name: Run tests with race detection
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        if (( $(echo "${COVERAGE} < ${COVERAGE_THRESHOLD}" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
          exit 1
        fi

    - name: Security scan
      run: gosec ./...

    - name: Vulnerability check
      run: govulncheck ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Build for multiple platforms
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        BINARY_NAME="go-mastery-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-s -w" -o dist/${BINARY_NAME} ./...

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-mastery-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  # Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -count=3 ./... | tee benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable
        REDIS_URL: redis://localhost:6379
      run: go test -tags=integration ./...

  # Docker Build and Security Scan
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: go-mastery:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'go-mastery:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4

  # Release (only on main branch)
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, build, benchmark, integration, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract version from git tags or use timestamp
        VERSION=$(git describe --tags --always)
        if [[ ! "$VERSION" =~ ^v[0-9] ]]; then
          VERSION="v$(date +'%Y.%m.%d')-${VERSION:0:7}"
        fi

        echo "Creating release ${VERSION}"
        gh release create "${VERSION}" \
          --title "Go Mastery ${VERSION}" \
          --notes "Automated release from main branch" \
          --draft=false \
          --prerelease=false \
          artifacts/*/*

  # Nightly Security Scan
  nightly-security:
    name: Nightly Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run comprehensive security scan
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

        echo "Running gosec..."
        gosec -fmt json -out gosec-report.json -stdout ./...

        echo "Running govulncheck..."
        govulncheck ./... > vuln-report.txt 2>&1 || true

        echo "Security scan completed"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          gosec-report.json
          vuln-report.txt

  # Code Coverage Tracking
  coverage:
    name: Coverage Tracking
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate coverage report
      run: |
        go test -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html